apply plugin: "com.android.application"
apply plugin: "com.google.gms.google-services"
apply plugin: "realm-android"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"]
 * ]
 */
 
project.ext.react = [
    // the name of the generated asset file containing your JS bundle
    bundleAssetName: "index.android.bundle",
 
    // the entry file for bundle generation
    entryFile: "index.android.js",
 
    // whether to bundle JS and assets in debug mode
    bundleInDebug: false,
    bundleInStaging: true,
    bundleInRelease: true
]
 

apply from: "react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

dependencies {
    compile project(':react-native-code-push')

    compile project(':react-native-device-info')

    compile project(':react-native-hockeyapp')
    compile project(':react-native-mixpanel')

    compile project(':react-native-material-kit')
    compile project(':react-native-fs')

    compile project(':realm')
    compile "com.android.support:support-v4:23.0.1"
    compile fileTree(dir: "libs", include: ["*.jar"])

    compile project(':react-native-datetime-picker-fixed')
    compile project(':react-native-vector-icons')
    compile 'com.android.support:appcompat-v7:23.2.0'
    compile 'com.facebook.react:react-native:+'
    // From node_modules
    compile 'com.google.code.gson:gson:2.4'
    compile 'gatewayapps.crondroid:crondroid:1.0.0'
    compile 'joda-time:joda-time:2.9.1'
    compile 'com.google.android.gms:play-services:8.3.0'
    compile 'com.microsoft.azure:azure-notifications-handler:1.0.1@aar'
    compile project(':react-native-push-notification')
    compile files('src/libs/notification-hubs-0.4.jar')
    compile 'net.hockeyapp.android:HockeySDK:3.7.1'

}


android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "com.solace_react"
        minSdkVersion 19
        targetSdkVersion 22
        versionCode 722

        versionName "1.0.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        multiDexEnabled true
        manifestPlaceholders = [HOCKEYAPP_APP_ID: "361ca7546af94eb8be9530c42caf5338" ]
    }
    signingConfigs {
        release {
            storeFile file(MYAPP_RELEASE_STORE_FILE)
            storePassword MYAPP_RELEASE_STORE_PASSWORD
            keyAlias MYAPP_RELEASE_KEY_ALIAS
            keyPassword MYAPP_RELEASE_KEY_PASSWORD

        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    dexOptions
            {
                javaMaxHeapSize "4g"
            }
    buildTypes {
        debug {
             buildConfigField "String", "androidDeploymentKey",  "\"3ZcAVN-rwgdgpTvbS0o1t3C4tMES4yiOxJtax\""
            buildConfigField "Boolean", "DEBUG_MODE", "true"
        }
          staging {
              buildConfigField "String", "androidDeploymentKey",  "\"3ZcAVN-rwgdgpTvbS0o1t3C4tMES4yiOxJtax\""
            buildConfigField "Boolean", "DEBUG_MODE", "false"
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
            
        }
        release {
                        buildConfigField "Boolean", "DEBUG_MODE", "false"
          buildConfigField "String", "androidDeploymentKey", "\"JMRJYezEdc1biWJZh8m6sH1lbHP14yiOxJtax\""
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
        
 
    }
    
    
    packagingOptions {
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
}
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}



repositories
        {
            maven
                    {
                url "http://dl.bintray.com/microsoftazuremobile/SDK"
                    }

            maven {
                url "http://dl.bintray.com/johnmurphy01/maven"
            }
        }